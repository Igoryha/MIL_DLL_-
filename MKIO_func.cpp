/*============================================================================
                      Copyright ГосНИИАС
..............................................................................
ПРОЕКТ       : модель изд. 101КС-В
..............................................................................
ИМЯ МОДУЛЯ   : Вспомогательные функции для кодировки и декодировки данных,
               идущих по линии МКИО из изд.101КС-В
ИМЯ ФАЙЛА    : MKIO_func.c
АББРЕВИАТУРА : mkio
АВТОР        : Мазур Е.Ф.
ДАТА         : 22.04.2011
..............................................................................
ОПИСАНИЕ МОДУЛЯ: Данный модуль содержит вспомогательные функции, используемые
                 при запаковке и распаковке данных, передаваемых
                 по линии МКИО в БЦВМ из изд. 101КС-В
..............................................................................
ФУНКЦИИ:
      Список экспортируемых функций модуля
         mkioCodInt
         mkioCodBit
         mkioCodReal
         mkioDecodInt
         mkioDecodUInt
         mkioDecodBit
         mkioDecodReal
      Список внутренних функций модуля
         mkioCreateMask

==============================================================================
*/

#define MKIOfunc
#include "MKIO_func.h"

/* Нумерация разрядов, соответствует нумерации, принятой в линии МКИО 1553  */
/* (кодировка по ГОСТ: крайний левый бит - 04-й, крайний правый - 19-й).    */
/*                     старший 04 бит = pow(2,15), младший 19 бит = pow(2,0)*/

/*==========================================================================*/
/*  В функциях номер левого бита должен быть меньше номера правого бита !!! */
/*==========================================================================*/

/*--------------------------------------------------------------------------*/
/*                Константы и макросы                                       */
/*   нет                                                                    */

/*--------------------------------------------------------------------------*/
/*                Типы                                                      */
/*   нет                                                                    */

/*--------------------------------------------------------------------------*/
/*                Переменные                                                */
/*   нет                                                                    */

/*--------------------------------------------------------------------------*/
/*         Заголовки локальных функций, описанных в данном модуле           */

word16 mkioCreateMask
(
   int BitLeft,
   int BitRight
);

/*--------------------------------------------------------------------------*/
/*              Экспортируемые функции                                      */

/*
==============================================================================
ИМЯ ФУНКЦИИ: mkioCodInt
..............................................................................
ОПИСАНИЕ   : Функция кодирует целое число в указанный диапазон
             разрядов.16-разрядного слова в формат линии МКИО
..............................................................................
*/
void mkioCodInt
(
   // Входные данные
   int      Sign,
   // Нумерация раздядов в линии МКИО 1553 (4 ... 19), 4-старший разряд
   int      bitLeft,
   int      bitRight,
   int      Value,
   // Входы-Выходы
   word16*  W
)
{

   word16 Code;
   word16 Mask;

   if( Sign == 1 )
   {
      Mask = mkioCreateMask( bitLeft-1, bitRight );
   }
   else
   {
      Mask = mkioCreateMask( bitLeft, bitRight );
   }

   Code = (word16)(Value) << ( 19 - bitRight );

   *W = ( Code & Mask ) | ( *W & (~Mask) );

} // mkioCodInt


/*
==============================================================================
ИМЯ ФУНКЦИИ: mkioCodBit
..............................................................................
ОПИСАНИЕ   : Функция кодирует один бит (значения 0 или 1) в указанный разряд
             16-разрядного слова в формат линии МКИО
..............................................................................
*/
void mkioCodBit
(
   // Входные данные
   int          bitNum,
   unsigned int Discret,
   // Входы-Выходы
   word16*      W
)
{

   word16 Mask = 0x0001 << ( 19 - bitNum );
   word16 Code = Discret << ( 19 - bitNum );

   *W = ( Code & Mask ) | ( *W & (~Mask) );

} // mkioCodBit


/*
==============================================================================
ИМЯ ФУНКЦИИ: mkioCodReal
..............................................................................
ОПИСАНИЕ   : Функция кодирует вещественное число в указанный
             диапазон разрядов.16-разрядного слова с определенной ЦСР в формат
             линии МКИО
..............................................................................
*/
void mkioCodReal
(
   // Входные данные
   int      Sign,
   // Нумерация раздядов в линии МКИО 1553 (4 ... 19), 4-старший разряд
   int      bitLeft,
   int      bitRight,
   double   Value,
   double   MSB,
   // Входы-Выходы
   word16* W
)
{

   word16 Mask;
   word16 W_MSB = 0x0001 << (19 - bitLeft);
   word16 Code  = (word16)(Value * ( W_MSB / MSB ));


   if( Sign == 0 )
   // Маска для положительных чисел (без знака)
   {
      Mask = mkioCreateMask( bitLeft, bitRight );
   }
   else
   // Маска для отрицательных чисел со знаком
   {
      Mask = mkioCreateMask( bitLeft-1, bitRight );
   }

   *W = ( Code & Mask ) | ( *W & (~Mask) );

} // mkioCodReal


/*
==============================================================================
ИМЯ ФУНКЦИИ: mkioDecodInt
..............................................................................
ОПИСАНИЕ   : Функция декодирует указанный диапазон разрядов.16-разрядного
             слова из формата линии МКИО в целое число
..............................................................................
*/
void mkioDecodInt
(
   // Входные данные
   int     Sign,
   // Нумерация раздядов в линии МКИО 1553 (4 ... 19), 4-старший разряд
   int     bitLeft,
   int     bitRight,
   word16  W,
   // Выходные данные
   int*    Value
)
{

   word16 Mask0;
   word16 W1;

   Word32 Mask;
   Word32 W2;


   if( Sign == 1 )
   {
      unsigned int Mask2 = 0x0001 << ( 19 - (bitLeft-1) );
      unsigned int Sign_1 = W & ( 0x0001 << ( 19 - (bitLeft-1) ) );

      // Декодировка знаковых целых чисел
      Mask0 = mkioCreateMask( bitLeft-1, bitRight );
      W1 = ( W & Mask0 ) >> ( 19 - bitRight );

      // Если есть 1 в знаковом разряде
      if( Mask2 == Sign_1 )
      {
         // Декодировка отрицательных целых чисел
         Mask = ~( ( 0xffffffff & Mask0 ) >> ( 19 - bitRight ) );
         W2 = Mask | W1;
      }
      else
      {
         // Декодировка положительных целых чисел
         W2 = W1;
      }
      *Value = (int)( W2 );
   }
   else
   {
      // Декодировка беззнаковых целых чисел
      Mask0 = mkioCreateMask( bitLeft, bitRight );
      *Value = (int)(( W & Mask0 ) >> ( 19 - bitRight ) );
   }

} // mkioDecodInt


/*
==============================================================================
ИМЯ ФУНКЦИИ: mkioDecodUInt
..............................................................................
ОПИСАНИЕ   : Функция декодирует заданный диапазон разрядов.16-разрядного
             слова из формата линии МКИО в беззнаковое целое число
..............................................................................
*/
void mkioDecodUInt
(
   // Входные данные
   // Нумерация раздядов в линии МКИО 1553 (4 ... 19), 4-старший разряд
   int           bitLeft,
   int           bitRight,
   word16        W,
   // Выходные данные
   unsigned int* Value
)
{

   // Всегда номер левого бита должен быть меньше номера правого бита !!!
   word16 Mask = mkioCreateMask( bitLeft, bitRight );

   *Value = (unsigned int)(( W & Mask ) >> ( 19 - bitRight ) );

} // mkioDecodUInt


/*
==============================================================================
ИМЯ ФУНКЦИИ: mkioDecodBit
..............................................................................
ОПИСАНИЕ   : Функция декодирует один бит (значения 0 или 1) из указанного
             разряда.16-разрядного слова в формате линии МКИО
..............................................................................
*/
void mkioDecodBit
(
   // Входные данные
   int           bitNum,
   word16        W,
   // Выходные данные
   unsigned int* Discret
)
{

   word16 Mask = 0x0001 << ( 19 - bitNum );

   *Discret = (unsigned int)(( W & Mask ) >> ( 19 - bitNum ));

} // mkioDecodBit


/*
==============================================================================
ИМЯ ФУНКЦИИ: mkioDecodReal
..............................................................................
ОПИСАНИЕ  : Функция декодирует указанный диапазон разрядов 16-разрядного
            слова из формата линии МКИО в вещественное число с учетом
            заданной цены старшего разряда (ЦСР).
..............................................................................
*/
void mkioDecodReal
(
   // Входные данные
   int      Sign,
   // Нумерация раздядов в линии МКИО 1553 (4 ... 19), 4-старший разряд
   int      bitLeft,
   int      bitRight,
   double   MSB,
   word16   W,
   // Выходные данные
   double*  Value
)
{

   word16 Mask;

   Word32 W_MSB;
   Word32 W1;

   if( Sign == 0 )
   // Маска для положительных чисел (без знака)
   {
      // Всегда номер левого бита должен быть меньше номера правого бита !!!
      Mask = mkioCreateMask( bitLeft, bitRight );
      W1 = ( W & Mask ) << ( 12 + bitLeft );
      W_MSB = 0x80000000UL;

      *Value = ((double)( W1 )) / W_MSB * MSB;

   }
   else
   // Маска для вещественных чисел со знаком
   {
      Mask = mkioCreateMask( bitLeft-1, bitRight );
      W1 = ( W & Mask ) << ( 11 + bitLeft );
      W_MSB = 0x40000000UL;

      *Value = ((double)((int)( W1 ))) / W_MSB * MSB;

   }

} // mkioDecodReal


/*--------------------------------------------------------------------------*/
/*                  Внутренние функции                                      */


/*
==============================================================================
ИМЯ ФУНКЦИИ: mkioCreateMask
..............................................................................
ОСНОВАНИЕ ДЛЯ РАЗРАБОТКИ :
..............................................................................
ОПИСАНИЕ : Функция создает маску для выбора группы бит из 16-разрядного слова
..............................................................................
*/

/*
==============================================================================
ИМЯ ФУНКЦИИ: mkioDecodUInt
..............................................................................
ОПИСАНИЕ   : Функция декодирует заданный диапазон разрядов.16-разрядного
             слова из формата линии МКИО в беззнаковое целое число
..............................................................................
*/
void mkioDecodUChar
(
   // Входные данные
   // Нумерация раздядов в линии МКИО 1553 (4 ... 19), 4-старший разряд
   int           bitLeft,
   int           bitRight,
   word16        W,
   // Выходные данные
   unsigned char* Value
)
{

   // Всегда номер левого бита должен быть меньше номера правого бита !!!
   word16 Mask = mkioCreateMask( bitLeft, bitRight );

   *Value = (unsigned int)(( W & Mask ) >> ( 19 - bitRight ) );

} // mkioDecodUChar


word16 mkioCreateMask
(

   // Входные данные
   int BitLeft,
   int BitRight
)
{
   // Нумерация раздядов в линии МКИО 1553 (4 ... 19), 4-старший разряд
   // Всегда номер левого бита должен быть меньше номера правого бита !!!
   word16 Mask    = 0x0001 << ( 19 - BitRight );
   word16 MaskOut = 0x0000;
   int i;

   for( i=0; i<(BitRight - BitLeft)+1; i++ )
   {
      MaskOut = MaskOut | Mask;
      Mask = Mask << 1;
   }
   return( MaskOut );

} // mkioCreateMask

/*==========================================================================*/